{
	"speakers": [
	{
		"id": "baishakhi",
		"id_event": "sast",
		"image": "rayb.jpg",
		"name": "Baishakhi Ray",
		"institution": "Columbia University",
		"webpage": "http://rayb.info",
		"email": "rayb@cs.columbia.edu",
		"title": "Systematic Software Testing for Deep Learning Applications",
		"abstract": "We are now seeing a paradigm shift in software development, where decision making is increasingly shifting from hand-coded program logic to Deep Learning (DL) - popular applications of Speech Processing, Image Recognition, Robotics, Go game, etc. are using DL as their core components. Deep Neural Network (DNN), a widely used architecture of DL, is the key behind such progress. With such spectacular progress, they are also increasingly being used in safety-critical systems such as autonomous cars, medical diagnosis, malware detection, and aircraft collision avoidance systems. Such wide adoption of DL techniques comes with concerns about the reliability of these systems, as several erroneous behaviors have already been reported. Thus, it has become crucial to rigorously test these DL applications with realistic corner cases to ensure high reliability. However, due to the fundamental architectural differences between DNN and traditional software, existing software testing techniques do not apply to them in any obvious way. In fact, companies such as Google, Tesla, etc. are increasingly facing all the traditional software testing challenges to ensure reliable and safe DL applications. This talk will address how to systematically test Deep Learning applications.",
		"bio": "Baishakhi Ray is an Assistant Professor in the Department of Computer Science, Columbia University, NY, USA. She has received her Ph.D. degree from the University of Texas, Austin. Baishakhi's research interest is in the intersection of Software Engineering and Machine Learning. Baishakhi has received Best Paper awards at FASE 2020, FSE 2017, MSR 2017, IEEE Symposium on Security and Privacy (Oakland), 2014. Her research has also been published in CACM Research Highlights and has been widely covered in trade media. She is a recipient of the NSF CAREER award, VMware Early Career Faculty Award, and IBM Faculty Award."
	},
	{
		"id": "bogdan",
		"id_event": "vem",
		"image": "bogdan.jpg",
		"name": "Bogdan Vasilescu",
		"institution": "Carnegie Mellon University",
		"webpage": "https://bvasiles.github.io/",
		"email": "vasilescu@cmu.edu",
		"title": "What Can Analyzing Tens of Terabytes of Public Trace Data Tell us About Open Source Sustainability?",
		"abstract": "Open-source communities face significant sustainability challenges, from attracting and retaining a diverse set of contributors to fundraising. Through interviews, surveys, and analysis of billions of commits and other public traces, organization, functioning, and overall health of open-source communities were studied. The talk will highlight what the empirical evidence is for a range of research questions about non-technical issues, including: project-level risk factors associated with upstream and downstream dependencies, the value of diversity in open-source teams, factors contributing to longer-term engagement or premature disengagement of contributors, the effectiveness of donations as a funding model, and the role of transparency and signaling in increasing the health of open-source projects.",
		"bio": "Bogdan Vasilescu is mostly active in the Software Engineering research community, where he have co-chaired the MSR 2020 Data Showcase, has been serving on Program Committees for the major Software Engineering venues (including ICSE, FSE, and ASE). He is an Associate Editor for the ACM Transactions on Software Engineering and Methodology and is co-chairing the SIGSOFT Initiative on Data-driven Introspection, among others."
	},
	{
		"id": "davi",
		"id_event": "trilha-industria",
		"image": "davi.jpg",
		"name": "Davi Reis",
		"institution": "Loggi Tecnologia",
		"webpage": "https://www.linkedin.com/in/davidecastroreis/",
		"email": "#",
		"title": "The CTO Handbook for Large Architectural Decisions",
		"abstract": "Technological decisions are in practice bound by several organizational and business constraints, often not studied in depth as much as the intrinsic aspects of the technologies being considered. This talk will dive on the implicit framework used to introduce a new programming language in Loggi, a scale-up stage company, taking into account aspects as hiring, library availability, codebase transitioning and competition.",
		"bio": "Davi de Castro Reis, a computer scientist, started his career working as a developer and white hat hacker in the world of ISPs. During his MSc, he worked as database and information retrieval scientist, created the RTDM algorithm, co-authored the CMPH open source library, and joined Akwan, the startup that became Google Brazil. He worked during ten years at Google, leading projects in Search, Mobile and Social Ads. He brought Orkut from zero revenue to profitability and led the Google Pigeon project, improving local search for billions of people. He also co-founded, almost scaled and acquisold WorldSense. He is currently helping to rebuild Brazil's logistics as the CTO for Loggi."
	},
	{
		"id": "castor",
		"id_event": "vem",
		"image": "castor.jpg",
		"name": "Fernando Castor",
		"institution": "UFPE",
		"webpage": "https://sites.google.com/a/cin.ufpe.br/castor/",
		"email": "castor@cin.ufpe.br",
		"title": "Program Understanding as a Learning Activity",
		"abstract": "Reading code is an essential activity in software maintenance and evolution. Several studies with developers have investigated how different factors, such as the employed code constructs and naming conventions, can impact code readability, i.e., what makes a program easier or harder to read and apprehend by developers, and code legibility, i.e., what influences the ease of identifying elements of a program. These studies evaluate readability and legibility by means of different comprehension tasks and response variables. This talk will examine these tasks and variables in studies aiming to compare programming constructs, coding idioms, naming conventions, and formatting guidelines, e.g., recursive code vs. iterative code. To that end, a systematic literature review was conducted where 54 relevant papers were found. It was found out that most of these studies evaluate code readability and legibility by measuring the correctness of the subjectsâ€™ results (83.3%) or simply asking their personal opinions (55.6%). Some studies (16.7%) rely exclusively on the latter response variable. Also, there are still relatively few studies that monitor developer's physical signs, such as brain activation regions (5%). The study shows that attributes such as time and correctness are multi-faceted. For example, correctness can be measured as the ability to predict the output of a program, answer questions about its general behavior, precisely recall specific parts, among other things. These results make it clear that different evaluation approaches require different competencies from study subjects, e.g., tracing the program vs. summarizing its goal vs. memorizing its text. To assist researchers in the design of new studies and improve comprehension of existing ones, program comprehension is modeled as a learning activity by adapting a preexisting learning taxonomy. This adaptation indicates that some competencies, e.g., tracing, are often exercised in these evaluations whereas others, e.g., relating similar code snippets, are rarely targeted.",
		"bio": "Fernando Castor is, since December 2008, a professor at the Informatics Center of the Federal University of Pernambuco (Assistant Professor, 2008-2016, Associate Professor, 2016-). He is, since 2009, a researcher of the National Council of Scientific and Technological Development (CNPq), modality PQ2, and has been the principal investigator of six research projects funded by Brazilian research agencies. Fernando has supervised more than 20 MSc and PhD students. His research activity is mainly located within the areas of Software Engineering and Programming Languages and seeks to identify efficient ways to develop software that behaves efficiently. Over the past five years, his research has focused on the energy efficiency of software systems, in particular on how exploiting the design diversity of preexisting software components can be an inexpensive way to save energy. Furthermore, he has also been investigating how constructs for concurrency control and parallel execution management impact attributes such as performance, energy efficiency, and ease of maintenance. His research is in part experimental and in part based on the analysis of large scale open source code repositories. The developments achieved as a result of his research activity have been described in more than 100 scientific publications in some of the best conferences and journals in the aforementioned scientific areas. Examples include the ACM/IEEE International Conference on Software Engineering, the ACM SIGSOFT Symposium on Foundations of Software Engineering, the ACM Conference on Object-Oriented Programming, Systems, Languages, and Applications, the International Conference on Mining Software Repositories, and the Communications of the ACM. His publications appear to have had non-negligible impact, as evidenced by the more than 2,000 citations they have received (<a href='http://goo.gl/7PVWzB' style='color: #f4b321; font-size: 15px'>Google Scholar</a>)."
	},
	{
		"id": "pablo",
		"id_event": "mssis",
		"image": "pablo.png",
		"name": "Pablo Antonino",
		"institution": "Fraunhofer IESE",
		"webpage": "http://about.me/pabloantonino",
		"email": "pablo.antonino@iese.fraunhofer.de",
		"title": "Enabling Continuous Engineering for Dependable Systems with Simulations, Digital Twins, and Virtual Prototypes",
		"abstract": "Continuous software engineering aims at orchestrating engineering knowledge to react faster to market demands, which might range from software update in an industrial production plant to the incorporation of a new feature in a vehicle.â€¯In this regard, the use of advanced simulations techniques based on virtual prototypes and digital twins have been widely adopted in the industry of dependable systems as means to continuously enable evaluations of the architecture against the requirements, even prior to actual implementation. Fraunhofer IESE has developed methods and tools to enable simulated evaluations of architecture by means of virtual prototypes and digital twins and has supported companies from Europe in adopting these practices. This talk will present tools like Fraunhofer FERAL and the Industry 4.0 Middleware BaSyx, which have been developed to enable these practices, and will also provide an overview of the concrete challenges and direction for the industrial adoption of these practices.",
		"bio": "Dr. Pablo Oliveira Antonino is Head of the Embedded Software Engineering department of the Fraunhofer Institute for Experimental Software Engineering IESE in Kaiserslautern, Germany. He holds a PhD in Computer Science from Technische UniversitÃ¤t Kaiserslautern, and has experience with the design, evaluation, and integration of dependable embedded systems from various domains, such as automotive, avionics, agricultural and construction machines, medical devices, and smart industries."
	},
	{
		"id": "philip",
		"id_event": "sblp",
		"image": "philip.png",
		"name": "Philip Wadler",
		"institution": "University of Edinburgh",
		"webpage": "http://homepages.inf.ed.ac.uk/wadler/",
		"email": "wadler@inf.ed.ac.uk",
		"title": "Propositions as Types",
		"abstract": "The principle of Propositions as Types links logic to computation. At first sight, it appears to be a simple coincidence - almost a pun - but it turns out to be remarkably robust, inspiring the design of theorem provers and programming languages, and continuing to influence the forefronts of Computing. Propositions as Types has many names and many origins and is a notion with depth, breadth, and mystery.",
		"bio": "Philip Wadler likes to introduce theory into practice, and practice into theory. An example of theory into practice: GJ, the basis for Java with generics, derives from quantifiers in second-order logic. An example of practice into theory: Featherweight Java specifies the core of Java in less than one page of rules. He is a principal designer of the Haskell programming language, contributing to its two main innovations, type classes and monads. The YouTube video of his Strange Loop talk Propositions as Types has over 75,000 views. He is a Professor of Theoretical Computer Science at the University of Edinburgh and Senior Research Fellow at IOHK. He is an ACM Fellow, a Fellow of the Royal Society of Edinburgh, and editor-in-chief of Proceedings of the ACM for Programming Languages. He is past chair of ACM SIGPLAN, past holder of a Royal Society-Wolfson Research Merit Fellowship, winner of the SIGPLAN Distinguished Service Award, and a winner of the POPL Most Influential Paper Award. Previously, he worked or studied at the Stanford University, Xerox Parc, CMU, Oxford University, Chalmers University of Technology, Glasgow University, Bell Labs, and Avaya Labs, and visited as a guest professor in Copenhagen, Sydney, and Paris. He has an <emph>h</emph>-index of over 70 with more than 25,000 citations to his work, according to Google Scholar. He contributed to the designs of Haskell, Java, and XQuery and is co-author of <emph>Introduction to Functional Programming</emph> (Prentice Hall, 1988), <emph>XQuery from the Experts</emph> (Addison Wesley, 2004), <emph>Generics and Collections in Java</emph> (O'Reilly, 2006), and <emph>Programming Language Foundations in Agda</emph> (2018). He has delivered invited talks in locations ranging from Aizu to Zurich."
	}]
}